
name: Terraform-PR
on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
env:
  REGION: us-east-1
  BUCKET: abc-kishore
  WORKSPACE: XYZ 
jobs:
  terraform-pr:
    name: Terraform-PR
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: read
    steps:
      
      - name: Configure Gamio AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Download S3 Object
        run: aws s3 cp s3://abc-kishore/${WORKSPACE}.tfvars tf.tfvars
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            terraform_version: latest


      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET" -backend-config="key=${WORKSPACE}.tfstate" -backend-config="region=$REGION"

      - name: Terraform Validate
        id: validate
        run: terraform validate
        
      - name: terraform workspace if exists
        run: |
          terraform workspace list
          terraform workspace select ${WORKSPACE}
        continue-on-error: true   
        
      

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var-file="tf.tfvars"

        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: >
            const output = `#### Terraform Format and Style 🖌\`${{
            steps.fmt.outcome }}\`

            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`


            <details><summary>Show Plan</summary>


            \`\`\`terraform\n

            ${process.env.PLAN}

            \`\`\`


            </details>


            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;


            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=tf.tfvars
